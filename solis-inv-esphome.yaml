#
# solis-inv-esphome.yaml -- Ginlong Solis INV Inverter ESPhome definition file
#
# ! This file only works with Solis 'INV' type inverters !
# ! This file only works with the Solis S3 WiFi stick (Gen 3, EMW3080 chip) !
# ! Make sure to correctly set timezone within 'time' section below !
#
# (C) 2023 Hajo Noerenberg
#
# Usage: https://docs.libretuya.ml/docs/projects/esphome/#build-upload
#
# http://www.noerenberg.de/
# https://github.com/hn/ginlong-solis
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3.0 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/gpl-3.0.txt>.
#

esphome:
  name: solis-inv
  friendly_name: Ginlong Solis Inverter
  name_add_mac_suffix: true
  platformio_options:
    board_build.mcu: rtl8710bn
    board_build.f_cpu: 125000000L

libretuya:
  board: generic-rtl8710bx-4mb-980k
  framework:
    version: latest

logger:
  hardware_uart: SERIAL2

time:
  - platform: sntp
    id: sntp_time
    timezone: "CET-1CEST,M3.5.0,M10.5.0/3"

api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: !secret wifi_ap_ssid
    password: !secret wifi_ap_password

captive_portal:

interval:
  - interval: 1s
    then:
      if:
        condition:
          wifi.connected:
        then:
          if:
            condition:
              switch.is_off: led_green_net
            then:
              - switch.turn_on: led_green_net
        else:
          if:
            condition:
              switch.is_on: led_green_net
            then:
              - switch.turn_off: led_green_net

script:
  - mode: restart
    id: blink_led_com
    then:
      - switch.turn_on: led_orange_com
      - delay: 500ms
      - switch.turn_off: led_orange_com

uart:
  id: uart_0
  tx_pin: PA23
  rx_pin: PA18
  baud_rate: 9600

modbus:
  flow_control_pin: PA19
  send_wait_time: 300ms
  id: modbus_hw

modbus_controller:
  - id: modbus_master
    address: 0x1
    modbus_id: modbus_hw
    setup_priority: -10
#    update_interval: 10s

button:
  - platform: factory_reset
    name: Restart with factory default settings
    id: reset_all

switch:
  - platform: gpio
    restore_mode: ALWAYS_OFF
    pin:
      number: PA12
      mode: output
    id: led_orange_com
  - platform: gpio
    restore_mode: ALWAYS_OFF
    pin:
      number: PA05
      mode: output
    id: led_green_net

binary_sensor:
  - platform: gpio
    pin:
      number: PA08
      inverted: true
    id: button_reset
    on_click:
      min_length: 5s
      max_length: 300s
      then:
        - button.press: reset_all
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Working status Normal
    register_type: read
    address: 3071 # = 3072 - 1
    bitmask: 0x0001
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Working status Initializing
    register_type: read
    address: 3071 # = 3072 - 1
    bitmask: 0x0002
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Working status Grid off
    device_class: problem
    register_type: read
    address: 3071 # = 3072 - 1
    bitmask: 0x0004
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Working status Fault to stop
    device_class: problem
    register_type: read
    address: 3071 # = 3072 - 1
    bitmask: 0x0008
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Working status Standby
    register_type: read
    address: 3071 # = 3072 - 1
    bitmask: 0x0010
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Working status Derating
    register_type: read
    address: 3071 # = 3072 - 1
    bitmask: 0x0020
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Working status Limitating
    register_type: read
    address: 3071 # = 3072 - 1
    bitmask: 0x0040
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Working status Grid surge
    device_class: problem
    register_type: read
    address: 3071 # = 3072 - 1
    bitmask: 0x0100
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Working status Fan fault
    device_class: problem
    register_type: read
    address: 3071 # = 3072 - 1
    bitmask: 0x0200

sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Active Power
    device_class: power
    state_class: measurement
    unit_of_measurement: W
    register_type: read
    address: 3004 # = 3005 - 1
    value_type: U_DWORD
    on_value:
      then:
        - script.execute: blink_led_com
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Total DC output power
    device_class: power
    state_class: measurement
    unit_of_measurement: W
    register_type: read
    address: 3006 # = 3007 - 1
    value_type: U_DWORD
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Total energy
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: kWh
    register_type: read
    address: 3008 # = 3009 - 1
    value_type: U_DWORD
    force_new_range: true # workaround to seperate reg 3006: "skip_updates applies for all components in the same range"
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Energy this month
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: kWh
    register_type: read
    address: 3010 # = 3011 - 1
    value_type: U_DWORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Energy last month
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: kWh
    register_type: read
    address: 3012 # = 3013 - 1
    value_type: U_DWORD
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Energy today
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: kWh
    register_type: read
    address: 3014 # = 3015 - 1
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Energy last day
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: kWh
    register_type: read
    address: 3015 # = 3016 - 1
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: DC voltage 1
    device_class: voltage
    state_class: measurement
    unit_of_measurement: V
    register_type: read
    address: 3021 # = 3022 - 1
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: DC current 1
    device_class: current
    state_class: measurement
    unit_of_measurement: A
    register_type: read
    address: 3022 # = 3023 - 1
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: DC voltage 2
    device_class: voltage
    state_class: measurement
    unit_of_measurement: V
    register_type: read
    address: 3023 # = 3024 - 1
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: DC current 2
    device_class: current
    state_class: measurement
    unit_of_measurement: A
    register_type: read
    address: 3024 # = 3025 - 1
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Inverter temperature
    device_class: temperature
    state_class: measurement
    unit_of_measurement: C
    register_type: read
    address: 3041 # = 3042 - 1
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Grid frequency
    device_class: frequency
    state_class: measurement
    unit_of_measurement: Hz
    register_type: read
    address: 3042 # = 3043 - 1
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Product model
    register_type: read
    address: 2999 # = 3000 - 1
    response_size: 2
    raw_encode: HEXBYTES
    entity_category: diagnostic
    icon: mdi:factory
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: DSP software version
    register_type: read
    address: 3000 # = 3001 - 1
    response_size: 2
    force_new_range: true # workaround for bug concatening model, dsp and lcd
    raw_encode: HEXBYTES
    entity_category: diagnostic
    icon: mdi:chip
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: LCD software version
    register_type: read
    address: 3001 # = 3002 - 1
    response_size: 2
    raw_encode: HEXBYTES
    entity_category: diagnostic
    icon: mdi:chip
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Country standard code
    register_type: read
    address: 3053 # = 3054 - 1
    response_size: 2
    raw_encode: HEXBYTES
    entity_category: diagnostic
    icon: mdi:earth
    skip_updates: 10
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        /* Solis Spec Appendix 3 */
        case 0x003: return std::string("VDE0126");
        case 0x009: return std::string("MEX-CFE");
        case 0x00B: return std::string("VDE4105");
      }
      return x;
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    name: Inverter SN
    register_type: read
    address: 3060 # = 3061 - 1
    register_count: 4
    raw_encode: HEXBYTES
    entity_category: diagnostic
    icon: mdi:numeric
    skip_updates: 10
    lambda: |-
      char serialnumber[4 * 4 + 1];
      for (int j = 0; j < 4; j++) {
        unsigned int r = esphome::modbus_controller::word_from_hex_str(x, j * 2);;
        sprintf(serialnumber + (j * 4), "%02x%02x",
          (r & 0x0F) << 4 | (r & 0xF0) >> 4, (r & 0x0F00) >> 4 | (r & 0xF000) >> 12);
      }
      serialnumber[4 * 4] = 0;
      return std::string(serialnumber);
  - platform: modbus_controller
    modbus_controller_id: modbus_master
    id: inverter_rtc
    register_type: holding
    address: 2999 # = 3000 - 1
    register_count: 6
    raw_encode: HEXBYTES
    entity_category: diagnostic
    icon: mdi:clock-digital
    skip_updates: 10
    lambda: |-
      time_t i_t;
      struct tm i_tm = { 0 };
      i_tm.tm_year  = modbus_controller::word_from_hex_str(x, 0*2) + 2000 - 1900;
      i_tm.tm_mon   = modbus_controller::word_from_hex_str(x, 1*2) - 1;
      i_tm.tm_mday  = modbus_controller::word_from_hex_str(x, 2*2);
      i_tm.tm_hour  = modbus_controller::word_from_hex_str(x, 3*2);
      i_tm.tm_min   = modbus_controller::word_from_hex_str(x, 4*2);
      i_tm.tm_sec   = modbus_controller::word_from_hex_str(x, 5*2);
      i_tm.tm_isdst = -1;
      i_t = mktime(&i_tm);
      ESP_LOGI("SyncInverterRTC", "Inverter RTC is %02d:%02d:%02d %04d-%02d-%02d",
        i_tm.tm_hour, i_tm.tm_min, i_tm.tm_sec, i_tm.tm_year + 1900, i_tm.tm_mon + 1, i_tm.tm_mday);
      auto s_espt = id(sntp_time).now();
      if (s_espt.is_valid()) {
        double deviation = difftime(i_t, s_espt.timestamp);
        if (abs(deviation) > 42) {
          std::vector<uint16_t> rtc_data =
            {s_espt.year % 100, s_espt.month, s_espt.day_of_month, s_espt.hour, s_espt.minute, s_espt.second};
          modbus_controller::ModbusCommandItem set_rtc_command =
            modbus_controller::ModbusCommandItem::create_write_multiple_command(modbus_master, item->start_address, item->register_count, rtc_data);
          modbus_master->queue_command(set_rtc_command);
          ESP_LOGI("SyncInverterRTC", "Inverter RTC deviation=%.fs, updated RTC to %02d:%02d:%02d %04d-%02d-%02d",
            deviation, s_espt.hour, s_espt.minute, s_espt.second, s_espt.year, s_espt.month, s_espt.day_of_month);
        }
      } else {
        ESP_LOGI("SyncInverterRTC", "Inverter RTC not checked because NTP is not yet synchronised");
      }
      return {};

